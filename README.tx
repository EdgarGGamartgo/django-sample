1. First docker build .
2. docker-compose build
3. docker-compose run app sh -c "django-admin.py startproject app ."
4. docker-compose run app sh -c "python manage.py test"
5. docker-compose run app sh -c "python manage.py test && flake8"
6. docker-compose run app sh -c "python manage.py startapp core"
7. docker-compose run app sh -c "python manage.py makemigrations core" 
8. sudo docker-compose up
9. http://127.0.0.1:8000/admin
10. docker-compose run app sh -c "python manage.py createsuperuser"  ------->   ed@gmail.com    ->  thisissafe
11. docker-compose run --rm app sh -c "python manage.py startapp user"
12. docker-compose run app sh -c "python manage.py makemigrations" 

Endpoints

http://localhost:8000/api/recipe/ingredients/
http://localhost:8000/api/recipe/tags/
http://localhost:8000/api/recipe/


    admin/
    api/user/ create/ [name='create']
    api/user/ token/ [name='token']
    api/user/ me/ [name='me']
    api/recipe/

Where all must be accessed by an authenticated user


class BaseRecipeAttrViewSet(viewsets.GenericViewSet,
                            mixins.ListModelMixin,
                            mixins.CreateModelMixin):
    """Base viewset for user owned recipe attributes"""
    authentication_classes = (TokenAuthentication,)
    permission_classes = (IsAuthenticated,)

    def get_queryset(self):
        """Return objects for the current authenticated user only"""
        return self.queryset.filter(user=self.request.user).order_by('-name')

    def perform_create(self, serializer):
        """Create a new ingredient"""
        serializer.save(user=self.request.user)


class TagViewSet(BaseRecipeAttrViewSet):
    """Manage tags in the database"""
    queryset = Tag.objects.all()
    serializer_class = serializers.TagSerializer


class IngredientViewSet(BaseRecipeAttrViewSet):
    """Manage ingredients in the database"""
    queryset = Ingredient.objects.all()
    serializer_class = serializers.IngredientSerializer